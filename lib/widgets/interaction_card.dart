import 'package:flutter/material.dart';
import '../models/interaction.dart';
import '../data/mock_medications.dart';
import '../data/mock_instructions.dart';
import '../classes/medication_instruction.dart';
import 'package:compatibility_app/classes/medication.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Medication
import 'package:collection/collection.dart'; // –î–ª—è firstWhereOrNull

class InteractionCard extends StatelessWidget {
  final Interaction interaction;
  // –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
  final void Function(Medication) onTrackMed;

  const InteractionCard({
    super.key,
    required this.interaction,
    required this.onTrackMed, // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–Ø
  });

  Color getColor(InteractionSeverity severity) {
    switch (severity) {
      case InteractionSeverity.red:
        return Colors.red;
      case InteractionSeverity.yellow:
        return Colors.orange;
      case InteractionSeverity.green:
        return Colors.green;
    }
  }

  Icon getSeverityIcon(InteractionSeverity severity) {
    switch (severity) {
      case InteractionSeverity.red:
        return const Icon(Icons.block, color: Colors.red);
      case InteractionSeverity.yellow:
        return const Icon(Icons.error_outline, color: Colors.orange);
      case InteractionSeverity.green:
        return const Icon(Icons.check_circle_outline, color: Colors.green);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                getSeverityIcon(interaction.severity),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    interaction.medications.join(' + '),
                    style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 6),
            Text(
              interaction.severity.name.toUpperCase(),
              style: TextStyle(
                color: getColor(interaction.severity),
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            Text(interaction.description),
            const SizedBox(height: 12),
            ...interaction.medications.map((medName) {
              // –ò–°–ü–û–õ–¨–ó–£–ï–ú firstWhereOrNull –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
              final Medication? med = mockMedications.firstWhereOrNull(
                (m) => m.name == medName,
              );

              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω)
              if (med == null) {
                return const Text('–û—à–∏–±–∫–∞: –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.');
              }

              // –ò–°–ü–û–õ–¨–ó–£–ï–ú firstWhereOrNull –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
              final MedicationInstruction? instruction = mockInstructions.firstWhereOrNull(
                (i) => i.id == med.instructionId,
              );

              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 6),
                child: Card(
                  elevation: 1,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                  child: Padding(
                    padding: const EdgeInsets.all(12.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(med.name, style: const TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 4),
                        Text('–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ: ${med.activeIngredient}'),
                        Text('–ì—Ä—É–ø–ø–∞: ${med.group.join(', ')}'),
                        Text('–§–æ—Ä–º—ã –≤—ã–ø—É—Å–∫–∞: ${med.form.join(', ')}'),
                        Text('–¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫: ${med.tradeNames.join(', ')}'),
                        Text('–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: ${med.sideEffects.join(', ')}'),
                        if (med.warnings.isNotEmpty)
                          Text('‚ùó –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${med.warnings.join(', ')}'),
                        const SizedBox(height: 8),
                        Text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:', style: TextStyle(fontWeight: FontWeight.w600)),
                        if (instruction != null) ...[
                          if (instruction.warningsSection != null && instruction.warningsSection!.isNotEmpty)
                            Text('‚ö†Ô∏è ${instruction.warningsSection!}'),
                          if (instruction.interactionsSection != null && instruction.interactionsSection!.isNotEmpty)
                            Text('üíä ${instruction.interactionsSection!}'),
                          if (instruction.usageSection != null && instruction.usageSection!.isNotEmpty)
                            Text('üìã ${instruction.usageSection!}'),
                        ] else ...[
                          const Text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'),
                        ],
                        const SizedBox(height: 4),
                        Align(
                          alignment: Alignment.centerRight,
                          child: ElevatedButton.icon(
                            icon: const Icon(Icons.bookmark_add_outlined),
                            label: const Text('–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'),
                            onPressed: () {
                              // –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ onTrackMed –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç Medication
                              onTrackMed(med);
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }
}
